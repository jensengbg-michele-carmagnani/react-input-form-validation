[{"/Users/michelecarmagnani/Git/React/formProject/src/index.js":"1","/Users/michelecarmagnani/Git/React/formProject/src/App.js":"2","/Users/michelecarmagnani/Git/React/formProject/src/components/SimpleInput.js":"3","/Users/michelecarmagnani/Git/React/formProject/src/components/BasicForm.js":"4","/Users/michelecarmagnani/Git/React/formProject/src/hooks/use-input.js":"5"},{"size":142,"mtime":1616595887000,"results":"6","hashOfConfig":"7"},{"size":236,"mtime":1628064619957,"results":"8","hashOfConfig":"7"},{"size":2938,"mtime":1628086821926,"results":"9","hashOfConfig":"7"},{"size":3746,"mtime":1628069778923,"results":"10","hashOfConfig":"7"},{"size":618,"mtime":1628083137378,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"7gn6tb",{"filePath":"14","messages":"15","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"16","messages":"17","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"18","messages":"19","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"20","messages":"21","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"22","usedDeprecatedRules":"23"},"/Users/michelecarmagnani/Git/React/formProject/src/index.js",[],"/Users/michelecarmagnani/Git/React/formProject/src/App.js",[],"/Users/michelecarmagnani/Git/React/formProject/src/components/SimpleInput.js",["24"],"/Users/michelecarmagnani/Git/React/formProject/src/components/BasicForm.js",[],"/Users/michelecarmagnani/Git/React/formProject/src/hooks/use-input.js",["25"],"import React, { useState } from \"react\";\n\nconst useInput = (validateValue) => {\n  const [enteredValue, setEnteredValue] = useState(\"\");\n  const [enteredTouched, setIsTouched] = useState(false);\n\n  const valueIsValid = validateValue(enteredValue);\n  const hasError = !valueIsValid && enteredTouched;\n\n  const ValueChangeHandler = (event) => {\n    setEnteredValue(event.target.value);\n   \n  };\n\n  const inputBlurHandler = (event) => {\n    //validation by blur\n    setIsTouched(true);\n\n  };\n  return {\n    value: enteredValue,\n    hasError,\n    ValueChangeHandler,\n    inputBlurHandler,\n  };\n};\n\nexport default useInput;\n",["26","27"],{"ruleId":"28","severity":1,"message":"29","line":3,"column":8,"nodeType":"30","messageId":"31","endLine":3,"endColumn":16},{"ruleId":"28","severity":1,"message":"32","line":1,"column":8,"nodeType":"30","messageId":"31","endLine":1,"endColumn":13},{"ruleId":"33","replacedBy":"34"},{"ruleId":"35","replacedBy":"36"},"no-unused-vars","'useInput' is defined but never used.","Identifier","unusedVar","'React' is defined but never used.","no-native-reassign",["37"],"no-negated-in-lhs",["38"],"no-global-assign","no-unsafe-negation"]