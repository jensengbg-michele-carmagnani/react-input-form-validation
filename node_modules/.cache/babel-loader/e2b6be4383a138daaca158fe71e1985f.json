{"ast":null,"code":"var _jsxFileName = \"/Users/michelecarmagnani/Git/React/formProject/src/components/SimpleInput.js\",\n    _s = $RefreshSig$();\n\nimport React, { useRef, useState, useEffect } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst SimpleInput = props => {\n  _s();\n\n  const nameInputRef = useRef();\n  const [enteredName, setEnteredName] = useState(\"\");\n  const [enteredNameIsValid, setEnteredNameIsValid] = useState(false);\n  const [enteredNameTouched, setEnteredNameTouched] = useState(false);\n  useEffect(() => {\n    if (enteredNameIsValid) {\n      console.log(\"Name input is valid!!\");\n    }\n  }, [enteredNameIsValid]);\n\n  const nameInputChangeHandler = event => {\n    setEnteredName(event.target.value); // check the for every keystroke\n\n    if (event.target.value.trim() !== \"\") {\n      setEnteredNameIsValid(true);\n    }\n  };\n\n  const nameInputBlurHandler = event => {\n    //validation by blur\n    setEnteredNameTouched(true);\n\n    if (enteredName.trim() === \"\") {\n      setEnteredNameIsValid(false);\n    }\n  };\n\n  const formSubmitHandler = event => {\n    event.preventDefault(); // validate the name\n\n    setEnteredNameTouched(true);\n\n    if (enteredName.trim() === \"\") {\n      setEnteredNameIsValid(false);\n      return;\n    } // setEnteredNameTouched(false)\n\n\n    console.log(enteredName); // re-set the input\n\n    setEnteredName(\"\"); // using ref\n\n    const enteredValue = nameInputRef.current.value;\n    console.log(\"ref\", enteredValue); // reset input => NOT IDEAL, DON'T MANIPULATE THE DOM DIRECTLY\n\n    nameInputRef.current.value = \"\";\n  };\n\n  const nameInputIsInvalid = !enteredNameIsValid && enteredNameTouched;\n  const nameInputClasses = nameInputIsInvalid ? \"form-control invalid \" : \" form-control\";\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: formSubmitHandler,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: nameInputClasses,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"name\",\n        children: \"Your Name\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        ref: nameInputRef,\n        type: \"text\",\n        id: \"name\",\n        onChange: nameInputChangeHandler,\n        onBlur: nameInputBlurHandler\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }, this), nameInputIsInvalid && /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"error-text\",\n      children: \"Name must not be empty.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"form-actions\",\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 64,\n    columnNumber: 5\n  }, this);\n};\n\n_s(SimpleInput, \"bm/27lsNsiIXuRMukf2inprCLH4=\");\n\n_c = SimpleInput;\nexport default SimpleInput;\n\nvar _c;\n\n$RefreshReg$(_c, \"SimpleInput\");","map":{"version":3,"sources":["/Users/michelecarmagnani/Git/React/formProject/src/components/SimpleInput.js"],"names":["React","useRef","useState","useEffect","SimpleInput","props","nameInputRef","enteredName","setEnteredName","enteredNameIsValid","setEnteredNameIsValid","enteredNameTouched","setEnteredNameTouched","console","log","nameInputChangeHandler","event","target","value","trim","nameInputBlurHandler","formSubmitHandler","preventDefault","enteredValue","current","nameInputIsInvalid","nameInputClasses"],"mappings":"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","sourcesContent":["import React, { useRef, useState, useEffect } from \"react\";\n\nconst SimpleInput = (props) => {\n  const nameInputRef = useRef();\n  const [enteredName, setEnteredName] = useState(\"\");\n  const [enteredNameIsValid, setEnteredNameIsValid] = useState(false);\n  const [enteredNameTouched, setEnteredNameTouched] = useState(false);\n\n  useEffect(() => {\n    if (enteredNameIsValid) {\n      console.log(\"Name input is valid!!\");\n    }\n  }, [enteredNameIsValid]);\n\n\n\n  const nameInputChangeHandler = (event) => {\n    setEnteredName(event.target.value);\n    // check the for every keystroke\n    if (event.target.value.trim() !== \"\") {\n      setEnteredNameIsValid(true);\n    }\n  };\n\n  const nameInputBlurHandler = (event) => {\n    //validation by blur\n    setEnteredNameTouched(true);\n\n    if (enteredName.trim() === \"\") {\n      setEnteredNameIsValid(false);\n    }\n  };\n\n  const formSubmitHandler = (event) => {\n    event.preventDefault();\n\n    // validate the name\n    setEnteredNameTouched(true);\n\n    if (enteredName.trim() === \"\") {\n      setEnteredNameIsValid(false);\n      return;\n    }\n\n    // setEnteredNameTouched(false)\n    console.log(enteredName);\n\n    // re-set the input\n    setEnteredName(\"\");\n\n    // using ref\n    const enteredValue = nameInputRef.current.value;\n    console.log(\"ref\", enteredValue);\n// reset input => NOT IDEAL, DON'T MANIPULATE THE DOM DIRECTLY\n    nameInputRef.current.value = \"\";\n  };\n\n  const nameInputIsInvalid = !enteredNameIsValid && enteredNameTouched;\n  const nameInputClasses = nameInputIsInvalid\n    ? \"form-control invalid \"\n    : \" form-control\";\n\n  return (\n    <form onSubmit={formSubmitHandler}>\n      <div className={nameInputClasses}>\n        <label htmlFor=\"name\">Your Name</label>\n        <input\n          ref={nameInputRef}\n          type=\"text\"\n          id=\"name\"\n          onChange={nameInputChangeHandler}\n          onBlur={nameInputBlurHandler}\n        />\n      </div>\n      {nameInputIsInvalid && (\n        <p className=\"error-text\">Name must not be empty.</p>\n      )}\n      <div className=\"form-actions\">\n        <button>Submit</button>\n      </div>\n    </form>\n  );\n};\n\nexport default SimpleInput;\n"]},"metadata":{},"sourceType":"module"}