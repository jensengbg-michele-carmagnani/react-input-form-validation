{"ast":null,"code":"var _jsxFileName = \"/Users/michelecarmagnani/Git/React/formProject/src/components/SimpleInput.js\",\n    _s = $RefreshSig$();\n\nimport React, { useRef, useState, useEffect } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst SimpleInput = props => {\n  _s();\n\n  const nameInputRef = useRef();\n  const [enteredName, setEnteredName] = useState(\"\");\n  const [enteredEmail, setEnteredEmail] = useState(\"\");\n  useStat;\n  const [enteredNameTouched, setEnteredNameTouched] = useState(false); // we derive the validity from the states above\n\n  const enteredNameIsValid = enteredName.trim() !== '';\n  const nameInputIsInvalid = !enteredNameIsValid && enteredNameTouched; // deriving the overall validity of the form\n\n  let formIsValid = false;\n\n  if (nameInputIsInvalid) {\n    formIsValid = true;\n  }\n\n  const nameInputChangeHandler = event => {\n    setEnteredName(event.target.value);\n  };\n\n  const nameInputBlurHandler = event => {\n    //validation by blur\n    setEnteredNameTouched(true);\n  };\n\n  const formSubmitHandler = event => {\n    event.preventDefault(); // validate the name\n\n    setEnteredNameTouched(true);\n\n    if (!enteredNameIsValid) {\n      return;\n    }\n\n    console.log(enteredName); // re-set the input\n\n    setEnteredName(\"\");\n    setEnteredNameTouched(false); // using ref\n    //const enteredValue = nameInputRef.current.value;\n    //console.log(\"ref\", enteredValue);\n    // reset input with ref => NOT IDEAL, DON'T MANIPULATE THE DOM DIRECTLY\n    //nameInputRef.current.value = \"\";\n  };\n\n  const nameInputClasses = nameInputIsInvalid ? \"form-control invalid \" : \" form-control\";\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: formSubmitHandler,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: nameInputClasses,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"name\",\n        children: \"Your Name\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        ref: nameInputRef,\n        type: \"text\",\n        id: \"name\",\n        onChange: nameInputChangeHandler,\n        onBlur: nameInputBlurHandler\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }, this), nameInputIsInvalid && /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"error-text\",\n      children: \"Name must not be empty.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"form-actions\",\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        disabled: !formIsValid,\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 62,\n    columnNumber: 5\n  }, this);\n};\n\n_s(SimpleInput, \"52WOwEYntkVc7+XxnByNinc1jZo=\");\n\n_c = SimpleInput;\nexport default SimpleInput;\n\nvar _c;\n\n$RefreshReg$(_c, \"SimpleInput\");","map":{"version":3,"sources":["/Users/michelecarmagnani/Git/React/formProject/src/components/SimpleInput.js"],"names":["React","useRef","useState","useEffect","SimpleInput","props","nameInputRef","enteredName","setEnteredName","enteredEmail","setEnteredEmail","useStat","enteredNameTouched","setEnteredNameTouched","enteredNameIsValid","trim","nameInputIsInvalid","formIsValid","nameInputChangeHandler","event","target","value","nameInputBlurHandler","formSubmitHandler","preventDefault","console","log","nameInputClasses"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,MAAhB,EAAwBC,QAAxB,EAAkCC,SAAlC,QAAmD,OAAnD;;;AAEA,MAAMC,WAAW,GAAIC,KAAD,IAAW;AAAA;;AAC7B,QAAMC,YAAY,GAAGL,MAAM,EAA3B;AACA,QAAM,CAACM,WAAD,EAAcC,cAAd,IAAgCN,QAAQ,CAAC,EAAD,CAA9C;AACA,QAAM,CAACO,YAAD,EAAeC,eAAf,IAAkCR,QAAQ,CAAC,EAAD,CAAhD;AACAS,EAAAA,OAAO;AACP,QAAM,CAACC,kBAAD,EAAqBC,qBAArB,IAA8CX,QAAQ,CAAC,KAAD,CAA5D,CAL6B,CAQ7B;;AACA,QAAMY,kBAAkB,GAAGP,WAAW,CAACQ,IAAZ,OAAuB,EAAlD;AACA,QAAMC,kBAAkB,GAAG,CAACF,kBAAD,IAAuBF,kBAAlD,CAV6B,CAW9B;;AACC,MAAIK,WAAW,GAAG,KAAlB;;AAEA,MAAGD,kBAAH,EAAuB;AACrBC,IAAAA,WAAW,GAAG,IAAd;AACD;;AAED,QAAMC,sBAAsB,GAAIC,KAAD,IAAW;AACxCX,IAAAA,cAAc,CAACW,KAAK,CAACC,MAAN,CAAaC,KAAd,CAAd;AAED,GAHD;;AAKA,QAAMC,oBAAoB,GAAIH,KAAD,IAAW;AACtC;AACAN,IAAAA,qBAAqB,CAAC,IAAD,CAArB;AAGD,GALD;;AAOA,QAAMU,iBAAiB,GAAIJ,KAAD,IAAW;AACnCA,IAAAA,KAAK,CAACK,cAAN,GADmC,CAGnC;;AACAX,IAAAA,qBAAqB,CAAC,IAAD,CAArB;;AAEA,QAAI,CAACC,kBAAL,EAAyB;AACvB;AACD;;AAEDW,IAAAA,OAAO,CAACC,GAAR,CAAYnB,WAAZ,EAVmC,CAYnC;;AACAC,IAAAA,cAAc,CAAC,EAAD,CAAd;AACAK,IAAAA,qBAAqB,CAAC,KAAD,CAArB,CAdmC,CAgBnC;AACA;AACA;AACA;AACA;AACD,GArBD;;AAwBA,QAAMc,gBAAgB,GAAGX,kBAAkB,GACvC,uBADuC,GAEvC,eAFJ;AAIA,sBACE;AAAM,IAAA,QAAQ,EAAEO,iBAAhB;AAAA,4BACE;AAAK,MAAA,SAAS,EAAEI,gBAAhB;AAAA,8BACE;AAAO,QAAA,OAAO,EAAC,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAEE;AACE,QAAA,GAAG,EAAErB,YADP;AAEE,QAAA,IAAI,EAAC,MAFP;AAGE,QAAA,EAAE,EAAC,MAHL;AAIE,QAAA,QAAQ,EAAEY,sBAJZ;AAKE,QAAA,MAAM,EAAEI;AALV;AAAA;AAAA;AAAA;AAAA,cAFF;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,EAWGN,kBAAkB,iBACjB;AAAG,MAAA,SAAS,EAAC,YAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAZJ,eAcE;AAAK,MAAA,SAAS,EAAC,cAAf;AAAA,6BACE;AAAQ,QAAA,QAAQ,EAAE,CAACC,WAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YAdF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAoBD,CA9ED;;GAAMb,W;;KAAAA,W;AAgFN,eAAeA,WAAf","sourcesContent":["import React, { useRef, useState, useEffect } from \"react\";\n\nconst SimpleInput = (props) => {\n  const nameInputRef = useRef();\n  const [enteredName, setEnteredName] = useState(\"\");\n  const [enteredEmail, setEnteredEmail] = useState(\"\")\n  useStat\n  const [enteredNameTouched, setEnteredNameTouched] = useState(false);\n  \n\n  // we derive the validity from the states above\n  const enteredNameIsValid = enteredName.trim() !== '';\n  const nameInputIsInvalid = !enteredNameIsValid && enteredNameTouched;\n // deriving the overall validity of the form\n  let formIsValid = false;\n\n  if(nameInputIsInvalid) {\n    formIsValid = true;\n  }\n\n  const nameInputChangeHandler = (event) => {\n    setEnteredName(event.target.value);\n   \n  };\n\n  const nameInputBlurHandler = (event) => {\n    //validation by blur\n    setEnteredNameTouched(true);\n\n    \n  };\n\n  const formSubmitHandler = (event) => {\n    event.preventDefault();\n\n    // validate the name\n    setEnteredNameTouched(true);\n\n    if (!enteredNameIsValid) {\n      return;\n    }\n\n    console.log(enteredName);\n\n    // re-set the input\n    setEnteredName(\"\");\n    setEnteredNameTouched(false)\n\n    // using ref\n    //const enteredValue = nameInputRef.current.value;\n    //console.log(\"ref\", enteredValue);\n    // reset input with ref => NOT IDEAL, DON'T MANIPULATE THE DOM DIRECTLY\n    //nameInputRef.current.value = \"\";\n  };\n\n  \n  const nameInputClasses = nameInputIsInvalid\n    ? \"form-control invalid \"\n    : \" form-control\";\n\n  return (\n    <form onSubmit={formSubmitHandler}>\n      <div className={nameInputClasses}>\n        <label htmlFor=\"name\">Your Name</label>\n        <input\n          ref={nameInputRef}\n          type=\"text\"\n          id=\"name\"\n          onChange={nameInputChangeHandler}\n          onBlur={nameInputBlurHandler}\n        />\n      </div>\n      {nameInputIsInvalid && (\n        <p className=\"error-text\">Name must not be empty.</p>\n      )}\n      <div className=\"form-actions\">\n        <button disabled={!formIsValid}>Submit</button>\n      </div>\n    </form>\n  );\n};\n\nexport default SimpleInput;\n"]},"metadata":{},"sourceType":"module"}