{"ast":null,"code":"var _jsxFileName = \"/Users/michelecarmagnani/Git/React/formProject/src/components/SimpleInput.js\",\n    _s = $RefreshSig$();\n\nimport React, { useRef, useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst SimpleInput = props => {\n  _s();\n\n  const [enteredName, setEnteredName] = useState(\"\");\n  const [enteredNameIsValid, setEnteredNameIsValid] = useState(false);\n  const [enteredNameTouched, setEnteredNameTouched] = useState(false);\n  useEffect(() => {\n    if (enteredNameIsValid) {\n      console.log('Name input is valid!!');\n    }\n  }, [enteredNameIsValid]);\n  const nameInputRef = useRef();\n\n  const nameInputChangeHandler = event => {\n    setEnteredName(event.target.value);\n  };\n\n  const formSubmitHandler = event => {\n    event.preventDefault(); // validate the name \n\n    setEnteredNameTouched(true);\n\n    if (enteredName.trim() == \"\") {\n      setEnteredNameIsValid(false);\n      return;\n    } // setEnteredNameTouched(false)\n\n\n    console.log(enteredName); // re-set the input \n\n    setEnteredName(''); // using ref\n\n    const enteredValue = nameInputRef.current.value;\n    console.log('ref', enteredValue); // reset input => NOT IDEAL, DON'T MANIPULATE THE DOM DIRECTLY \n\n    nameInputRef.current.value = \"\";\n  };\n\n  const nameInputIsInvalid = !enteredNameIsValid && enteredNameTouched;\n  const nameInputClasses = nameInputIsInvalid ? \"form-control invalid \" : \" form-control\";\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: formSubmitHandler,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: nameInputClasses,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"name\",\n        children: \"Your Name\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        ref: nameInputRef,\n        type: \"text\",\n        id: \"name\",\n        onChange: nameInputChangeHandler\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }, this), nameInputIsInvalid && /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"error-text\",\n      children: \"Name must not be empty.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 30\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"form-actions\",\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 51,\n    columnNumber: 5\n  }, this);\n};\n\n_s(SimpleInput, \"lCLlLcrh3HcPvS7hoZKAJMs3Nzc=\");\n\n_c = SimpleInput;\nexport default SimpleInput;\n\nvar _c;\n\n$RefreshReg$(_c, \"SimpleInput\");","map":{"version":3,"sources":["/Users/michelecarmagnani/Git/React/formProject/src/components/SimpleInput.js"],"names":["React","useRef","useState","useEffect","SimpleInput","props","enteredName","setEnteredName","enteredNameIsValid","setEnteredNameIsValid","enteredNameTouched","setEnteredNameTouched","console","log","nameInputRef","nameInputChangeHandler","event","target","value","formSubmitHandler","preventDefault","trim","enteredValue","current","nameInputIsInvalid","nameInputClasses"],"mappings":";;;AAAA,OAAOA,KAAP,IAAcC,MAAd,EAAsBC,QAAtB,EAAgCC,SAAhC,QAAgD,OAAhD;;;AAGA,MAAMC,WAAW,GAAIC,KAAD,IAAW;AAAA;;AAE7B,QAAM,CAACC,WAAD,EAAcC,cAAd,IAAgCL,QAAQ,CAAC,EAAD,CAA9C;AACA,QAAM,CAAEM,kBAAF,EAAsBC,qBAAtB,IAA+CP,QAAQ,CAAC,KAAD,CAA7D;AACA,QAAM,CAACQ,kBAAD,EAAqBC,qBAArB,IAA8CT,QAAQ,CAAC,KAAD,CAA5D;AAGAC,EAAAA,SAAS,CAAC,MAAM;AACd,QAAGK,kBAAH,EAAsB;AACpBI,MAAAA,OAAO,CAACC,GAAR,CAAY,uBAAZ;AACD;AAEF,GALQ,EAKN,CAACL,kBAAD,CALM,CAAT;AAMA,QAAMM,YAAY,GAAGb,MAAM,EAA3B;;AACA,QAAMc,sBAAsB,GAAGC,KAAD,IAAW;AACvCT,IAAAA,cAAc,CAACS,KAAK,CAACC,MAAN,CAAaC,KAAd,CAAd;AACD,GAFD;;AAIA,QAAMC,iBAAiB,GAAGH,KAAD,IAAW;AAClCA,IAAAA,KAAK,CAACI,cAAN,GADkC,CAGlC;;AACAT,IAAAA,qBAAqB,CAAC,IAAD,CAArB;;AAEA,QAAGL,WAAW,CAACe,IAAZ,MAAsB,EAAzB,EAA4B;AAC1BZ,MAAAA,qBAAqB,CAAC,KAAD,CAArB;AACA;AACD,KATiC,CAWlC;;;AACAG,IAAAA,OAAO,CAACC,GAAR,CAAYP,WAAZ,EAZkC,CAclC;;AACAC,IAAAA,cAAc,CAAC,EAAD,CAAd,CAfkC,CAiBlC;;AACA,UAAMe,YAAY,GAAGR,YAAY,CAACS,OAAb,CAAqBL,KAA1C;AACAN,IAAAA,OAAO,CAACC,GAAR,CAAY,KAAZ,EAAkBS,YAAlB,EAnBkC,CAqBlC;;AACAR,IAAAA,YAAY,CAACS,OAAb,CAAqBL,KAArB,GAA6B,EAA7B;AACD,GAvBD;;AAyBA,QAAMM,kBAAkB,GAAG,CAAChB,kBAAD,IAAuBE,kBAAlD;AACA,QAAMe,gBAAgB,GAAGD,kBAAkB,GAAG,uBAAH,GAA6B,eAAxE;AAEA,sBACE;AAAM,IAAA,QAAQ,EAAEL,iBAAhB;AAAA,4BACE;AAAK,MAAA,SAAS,EAAEM,gBAAhB;AAAA,8BACE;AAAO,QAAA,OAAO,EAAC,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAEE;AAAO,QAAA,GAAG,EAAEX,YAAZ;AAA0B,QAAA,IAAI,EAAC,MAA/B;AAAsC,QAAA,EAAE,EAAC,MAAzC;AAAgD,QAAA,QAAQ,EAAEC;AAA1D;AAAA;AAAA;AAAA;AAAA,cAFF;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,EAKGS,kBAAkB,iBAAI;AAAG,MAAA,SAAS,EAAC,YAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YALzB,eAME;AAAK,MAAA,SAAS,EAAC,cAAf;AAAA,6BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YANF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAYD,CA1DD;;GAAMpB,W;;KAAAA,W;AA4DN,eAAeA,WAAf","sourcesContent":["import React,{useRef, useState, useEffect} from 'react';\n\n\nconst SimpleInput = (props) => {\n\n  const [enteredName, setEnteredName] = useState(\"\")\n  const [ enteredNameIsValid, setEnteredNameIsValid] = useState(false)\n  const [enteredNameTouched, setEnteredNameTouched] = useState(false)\n\n\n  useEffect(() => {\n    if(enteredNameIsValid){\n      console.log('Name input is valid!!')\n    }\n    \n  }, [enteredNameIsValid])\n  const nameInputRef = useRef()\n  const nameInputChangeHandler =(event) => {\n    setEnteredName(event.target.value);\n  }\n\n  const formSubmitHandler =(event) => {\n    event.preventDefault();\n\n    // validate the name \n    setEnteredNameTouched(true)\n\n    if(enteredName.trim() == \"\"){\n      setEnteredNameIsValid(false);\n      return\n    }\n   \n    // setEnteredNameTouched(false)\n    console.log(enteredName)\n\n    // re-set the input \n    setEnteredName('')\n\n    // using ref\n    const enteredValue = nameInputRef.current.value;\n    console.log('ref',enteredValue)\n\n    // reset input => NOT IDEAL, DON'T MANIPULATE THE DOM DIRECTLY \n    nameInputRef.current.value = \"\"\n  }\n\n  const nameInputIsInvalid = !enteredNameIsValid && enteredNameTouched\n  const nameInputClasses = nameInputIsInvalid ? \"form-control invalid \" : \" form-control\"\n\n  return (\n    <form onSubmit={formSubmitHandler}>\n      <div className={nameInputClasses}>\n        <label htmlFor='name'>Your Name</label>\n        <input ref={nameInputRef} type='text' id='name' onChange={nameInputChangeHandler} />\n      </div>\n      {nameInputIsInvalid && <p className=\"error-text\">Name must not be empty.</p>}\n      <div className=\"form-actions\">\n        <button>Submit</button>\n      </div>\n    </form>\n  );\n};\n\nexport default SimpleInput;\n"]},"metadata":{},"sourceType":"module"}