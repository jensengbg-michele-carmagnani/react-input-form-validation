{"ast":null,"code":"'use strict';\n\nconst MiniPass = require('minipass');\n\nconst Pax = require('./pax.js');\n\nconst Header = require('./header.js');\n\nconst fs = require('fs');\n\nconst path = require('path');\n\nconst maxReadSize = 16 * 1024 * 1024;\nconst PROCESS = Symbol('process');\nconst FILE = Symbol('file');\nconst DIRECTORY = Symbol('directory');\nconst SYMLINK = Symbol('symlink');\nconst HARDLINK = Symbol('hardlink');\nconst HEADER = Symbol('header');\nconst READ = Symbol('read');\nconst LSTAT = Symbol('lstat');\nconst ONLSTAT = Symbol('onlstat');\nconst ONREAD = Symbol('onread');\nconst ONREADLINK = Symbol('onreadlink');\nconst OPENFILE = Symbol('openfile');\nconst ONOPENFILE = Symbol('onopenfile');\nconst CLOSE = Symbol('close');\nconst MODE = Symbol('mode');\n\nconst warner = require('./warn-mixin.js');\n\nconst winchars = require('./winchars.js');\n\nconst stripAbsolutePath = require('./strip-absolute-path.js');\n\nconst modeFix = require('./mode-fix.js');\n\nconst WriteEntry = warner(class WriteEntry extends MiniPass {\n  constructor(p, opt) {\n    opt = opt || {};\n    super(opt);\n    if (typeof p !== 'string') throw new TypeError('path is required');\n    this.path = p; // suppress atime, ctime, uid, gid, uname, gname\n\n    this.portable = !!opt.portable; // until node has builtin pwnam functions, this'll have to do\n\n    this.myuid = process.getuid && process.getuid();\n    this.myuser = process.env.USER || '';\n    this.maxReadSize = opt.maxReadSize || maxReadSize;\n    this.linkCache = opt.linkCache || new Map();\n    this.statCache = opt.statCache || new Map();\n    this.preservePaths = !!opt.preservePaths;\n    this.cwd = opt.cwd || process.cwd();\n    this.strict = !!opt.strict;\n    this.noPax = !!opt.noPax;\n    this.noMtime = !!opt.noMtime;\n    this.mtime = opt.mtime || null;\n    if (typeof opt.onwarn === 'function') this.on('warn', opt.onwarn);\n    let pathWarn = false;\n\n    if (!this.preservePaths) {\n      const [root, stripped] = stripAbsolutePath(this.path);\n\n      if (root) {\n        this.path = stripped;\n        pathWarn = root;\n      }\n    }\n\n    this.win32 = !!opt.win32 || process.platform === 'win32';\n\n    if (this.win32) {\n      this.path = winchars.decode(this.path.replace(/\\\\/g, '/'));\n      p = p.replace(/\\\\/g, '/');\n    }\n\n    this.absolute = opt.absolute || path.resolve(this.cwd, p);\n    if (this.path === '') this.path = './';\n\n    if (pathWarn) {\n      this.warn('TAR_ENTRY_INFO', `stripping ${pathWarn} from absolute path`, {\n        entry: this,\n        path: pathWarn + this.path\n      });\n    }\n\n    if (this.statCache.has(this.absolute)) this[ONLSTAT](this.statCache.get(this.absolute));else this[LSTAT]();\n  }\n\n  [LSTAT]() {\n    fs.lstat(this.absolute, (er, stat) => {\n      if (er) return this.emit('error', er);\n      this[ONLSTAT](stat);\n    });\n  }\n\n  [ONLSTAT](stat) {\n    this.statCache.set(this.absolute, stat);\n    this.stat = stat;\n    if (!stat.isFile()) stat.size = 0;\n    this.type = getType(stat);\n    this.emit('stat', stat);\n    this[PROCESS]();\n  }\n\n  [PROCESS]() {\n    switch (this.type) {\n      case 'File':\n        return this[FILE]();\n\n      case 'Directory':\n        return this[DIRECTORY]();\n\n      case 'SymbolicLink':\n        return this[SYMLINK]();\n      // unsupported types are ignored.\n\n      default:\n        return this.end();\n    }\n  }\n\n  [MODE](mode) {\n    return modeFix(mode, this.type === 'Directory', this.portable);\n  }\n\n  [HEADER]() {\n    if (this.type === 'Directory' && this.portable) this.noMtime = true;\n    this.header = new Header({\n      path: this.path,\n      linkpath: this.linkpath,\n      // only the permissions and setuid/setgid/sticky bitflags\n      // not the higher-order bits that specify file type\n      mode: this[MODE](this.stat.mode),\n      uid: this.portable ? null : this.stat.uid,\n      gid: this.portable ? null : this.stat.gid,\n      size: this.stat.size,\n      mtime: this.noMtime ? null : this.mtime || this.stat.mtime,\n      type: this.type,\n      uname: this.portable ? null : this.stat.uid === this.myuid ? this.myuser : '',\n      atime: this.portable ? null : this.stat.atime,\n      ctime: this.portable ? null : this.stat.ctime\n    });\n\n    if (this.header.encode() && !this.noPax) {\n      this.write(new Pax({\n        atime: this.portable ? null : this.header.atime,\n        ctime: this.portable ? null : this.header.ctime,\n        gid: this.portable ? null : this.header.gid,\n        mtime: this.noMtime ? null : this.mtime || this.header.mtime,\n        path: this.path,\n        linkpath: this.linkpath,\n        size: this.header.size,\n        uid: this.portable ? null : this.header.uid,\n        uname: this.portable ? null : this.header.uname,\n        dev: this.portable ? null : this.stat.dev,\n        ino: this.portable ? null : this.stat.ino,\n        nlink: this.portable ? null : this.stat.nlink\n      }).encode());\n    }\n\n    this.write(this.header.block);\n  }\n\n  [DIRECTORY]() {\n    if (this.path.substr(-1) !== '/') this.path += '/';\n    this.stat.size = 0;\n    this[HEADER]();\n    this.end();\n  }\n\n  [SYMLINK]() {\n    fs.readlink(this.absolute, (er, linkpath) => {\n      if (er) return this.emit('error', er);\n      this[ONREADLINK](linkpath);\n    });\n  }\n\n  [ONREADLINK](linkpath) {\n    this.linkpath = linkpath.replace(/\\\\/g, '/');\n    this[HEADER]();\n    this.end();\n  }\n\n  [HARDLINK](linkpath) {\n    this.type = 'Link';\n    this.linkpath = path.relative(this.cwd, linkpath).replace(/\\\\/g, '/');\n    this.stat.size = 0;\n    this[HEADER]();\n    this.end();\n  }\n\n  [FILE]() {\n    if (this.stat.nlink > 1) {\n      const linkKey = this.stat.dev + ':' + this.stat.ino;\n\n      if (this.linkCache.has(linkKey)) {\n        const linkpath = this.linkCache.get(linkKey);\n        if (linkpath.indexOf(this.cwd) === 0) return this[HARDLINK](linkpath);\n      }\n\n      this.linkCache.set(linkKey, this.absolute);\n    }\n\n    this[HEADER]();\n    if (this.stat.size === 0) return this.end();\n    this[OPENFILE]();\n  }\n\n  [OPENFILE]() {\n    fs.open(this.absolute, 'r', (er, fd) => {\n      if (er) return this.emit('error', er);\n      this[ONOPENFILE](fd);\n    });\n  }\n\n  [ONOPENFILE](fd) {\n    const blockLen = 512 * Math.ceil(this.stat.size / 512);\n    const bufLen = Math.min(blockLen, this.maxReadSize);\n    const buf = Buffer.allocUnsafe(bufLen);\n    this[READ](fd, buf, 0, buf.length, 0, this.stat.size, blockLen);\n  }\n\n  [READ](fd, buf, offset, length, pos, remain, blockRemain) {\n    fs.read(fd, buf, offset, length, pos, (er, bytesRead) => {\n      if (er) {\n        // ignoring the error from close(2) is a bad practice, but at\n        // this point we already have an error, don't need another one\n        return this[CLOSE](fd, () => this.emit('error', er));\n      }\n\n      this[ONREAD](fd, buf, offset, length, pos, remain, blockRemain, bytesRead);\n    });\n  }\n\n  [CLOSE](fd, cb) {\n    fs.close(fd, cb);\n  }\n\n  [ONREAD](fd, buf, offset, length, pos, remain, blockRemain, bytesRead) {\n    if (bytesRead <= 0 && remain > 0) {\n      const er = new Error('encountered unexpected EOF');\n      er.path = this.absolute;\n      er.syscall = 'read';\n      er.code = 'EOF';\n      return this[CLOSE](fd, () => this.emit('error', er));\n    }\n\n    if (bytesRead > remain) {\n      const er = new Error('did not encounter expected EOF');\n      er.path = this.absolute;\n      er.syscall = 'read';\n      er.code = 'EOF';\n      return this[CLOSE](fd, () => this.emit('error', er));\n    } // null out the rest of the buffer, if we could fit the block padding\n\n\n    if (bytesRead === remain) {\n      for (let i = bytesRead; i < length && bytesRead < blockRemain; i++) {\n        buf[i + offset] = 0;\n        bytesRead++;\n        remain++;\n      }\n    }\n\n    const writeBuf = offset === 0 && bytesRead === buf.length ? buf : buf.slice(offset, offset + bytesRead);\n    remain -= bytesRead;\n    blockRemain -= bytesRead;\n    pos += bytesRead;\n    offset += bytesRead;\n    this.write(writeBuf);\n\n    if (!remain) {\n      if (blockRemain) this.write(Buffer.alloc(blockRemain));\n      return this[CLOSE](fd, er => er ? this.emit('error', er) : this.end());\n    }\n\n    if (offset >= length) {\n      buf = Buffer.allocUnsafe(length);\n      offset = 0;\n    }\n\n    length = buf.length - offset;\n    this[READ](fd, buf, offset, length, pos, remain, blockRemain);\n  }\n\n});\n\nclass WriteEntrySync extends WriteEntry {\n  [LSTAT]() {\n    this[ONLSTAT](fs.lstatSync(this.absolute));\n  }\n\n  [SYMLINK]() {\n    this[ONREADLINK](fs.readlinkSync(this.absolute));\n  }\n\n  [OPENFILE]() {\n    this[ONOPENFILE](fs.openSync(this.absolute, 'r'));\n  }\n\n  [READ](fd, buf, offset, length, pos, remain, blockRemain) {\n    let threw = true;\n\n    try {\n      const bytesRead = fs.readSync(fd, buf, offset, length, pos);\n      this[ONREAD](fd, buf, offset, length, pos, remain, blockRemain, bytesRead);\n      threw = false;\n    } finally {\n      // ignoring the error from close(2) is a bad practice, but at\n      // this point we already have an error, don't need another one\n      if (threw) {\n        try {\n          this[CLOSE](fd, () => {});\n        } catch (er) {}\n      }\n    }\n  }\n\n  [CLOSE](fd, cb) {\n    fs.closeSync(fd);\n    cb();\n  }\n\n}\n\nconst WriteEntryTar = warner(class WriteEntryTar extends MiniPass {\n  constructor(readEntry, opt) {\n    opt = opt || {};\n    super(opt);\n    this.preservePaths = !!opt.preservePaths;\n    this.portable = !!opt.portable;\n    this.strict = !!opt.strict;\n    this.noPax = !!opt.noPax;\n    this.noMtime = !!opt.noMtime;\n    this.readEntry = readEntry;\n    this.type = readEntry.type;\n    if (this.type === 'Directory' && this.portable) this.noMtime = true;\n    this.path = readEntry.path;\n    this.mode = this[MODE](readEntry.mode);\n    this.uid = this.portable ? null : readEntry.uid;\n    this.gid = this.portable ? null : readEntry.gid;\n    this.uname = this.portable ? null : readEntry.uname;\n    this.gname = this.portable ? null : readEntry.gname;\n    this.size = readEntry.size;\n    this.mtime = this.noMtime ? null : opt.mtime || readEntry.mtime;\n    this.atime = this.portable ? null : readEntry.atime;\n    this.ctime = this.portable ? null : readEntry.ctime;\n    this.linkpath = readEntry.linkpath;\n    if (typeof opt.onwarn === 'function') this.on('warn', opt.onwarn);\n    let pathWarn = false;\n\n    if (!this.preservePaths) {\n      const [root, stripped] = stripAbsolutePath(this.path);\n\n      if (root) {\n        this.path = stripped;\n        pathWarn = root;\n      }\n    }\n\n    this.remain = readEntry.size;\n    this.blockRemain = readEntry.startBlockSize;\n    this.header = new Header({\n      path: this.path,\n      linkpath: this.linkpath,\n      // only the permissions and setuid/setgid/sticky bitflags\n      // not the higher-order bits that specify file type\n      mode: this.mode,\n      uid: this.portable ? null : this.uid,\n      gid: this.portable ? null : this.gid,\n      size: this.size,\n      mtime: this.noMtime ? null : this.mtime,\n      type: this.type,\n      uname: this.portable ? null : this.uname,\n      atime: this.portable ? null : this.atime,\n      ctime: this.portable ? null : this.ctime\n    });\n\n    if (pathWarn) {\n      this.warn('TAR_ENTRY_INFO', `stripping ${pathWarn} from absolute path`, {\n        entry: this,\n        path: pathWarn + this.path\n      });\n    }\n\n    if (this.header.encode() && !this.noPax) {\n      super.write(new Pax({\n        atime: this.portable ? null : this.atime,\n        ctime: this.portable ? null : this.ctime,\n        gid: this.portable ? null : this.gid,\n        mtime: this.noMtime ? null : this.mtime,\n        path: this.path,\n        linkpath: this.linkpath,\n        size: this.size,\n        uid: this.portable ? null : this.uid,\n        uname: this.portable ? null : this.uname,\n        dev: this.portable ? null : this.readEntry.dev,\n        ino: this.portable ? null : this.readEntry.ino,\n        nlink: this.portable ? null : this.readEntry.nlink\n      }).encode());\n    }\n\n    super.write(this.header.block);\n    readEntry.pipe(this);\n  }\n\n  [MODE](mode) {\n    return modeFix(mode, this.type === 'Directory', this.portable);\n  }\n\n  write(data) {\n    const writeLen = data.length;\n    if (writeLen > this.blockRemain) throw new Error('writing more to entry than is appropriate');\n    this.blockRemain -= writeLen;\n    return super.write(data);\n  }\n\n  end() {\n    if (this.blockRemain) this.write(Buffer.alloc(this.blockRemain));\n    return super.end();\n  }\n\n});\nWriteEntry.Sync = WriteEntrySync;\nWriteEntry.Tar = WriteEntryTar;\n\nconst getType = stat => stat.isFile() ? 'File' : stat.isDirectory() ? 'Directory' : stat.isSymbolicLink() ? 'SymbolicLink' : 'Unsupported';\n\nmodule.exports = WriteEntry;","map":{"version":3,"sources":["/Users/michelecarmagnani/Git/React/formProject/node_modules/tar/lib/write-entry.js"],"names":["MiniPass","require","Pax","Header","fs","path","maxReadSize","PROCESS","Symbol","FILE","DIRECTORY","SYMLINK","HARDLINK","HEADER","READ","LSTAT","ONLSTAT","ONREAD","ONREADLINK","OPENFILE","ONOPENFILE","CLOSE","MODE","warner","winchars","stripAbsolutePath","modeFix","WriteEntry","constructor","p","opt","TypeError","portable","myuid","process","getuid","myuser","env","USER","linkCache","Map","statCache","preservePaths","cwd","strict","noPax","noMtime","mtime","onwarn","on","pathWarn","root","stripped","win32","platform","decode","replace","absolute","resolve","warn","entry","has","get","lstat","er","stat","emit","set","isFile","size","type","getType","end","mode","header","linkpath","uid","gid","uname","atime","ctime","encode","write","dev","ino","nlink","block","substr","readlink","relative","linkKey","indexOf","open","fd","blockLen","Math","ceil","bufLen","min","buf","Buffer","allocUnsafe","length","offset","pos","remain","blockRemain","read","bytesRead","cb","close","Error","syscall","code","i","writeBuf","slice","alloc","WriteEntrySync","lstatSync","readlinkSync","openSync","threw","readSync","closeSync","WriteEntryTar","readEntry","gname","startBlockSize","pipe","data","writeLen","Sync","Tar","isDirectory","isSymbolicLink","module","exports"],"mappings":"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","sourcesContent":["'use strict'\nconst MiniPass = require('minipass')\nconst Pax = require('./pax.js')\nconst Header = require('./header.js')\nconst fs = require('fs')\nconst path = require('path')\n\nconst maxReadSize = 16 * 1024 * 1024\nconst PROCESS = Symbol('process')\nconst FILE = Symbol('file')\nconst DIRECTORY = Symbol('directory')\nconst SYMLINK = Symbol('symlink')\nconst HARDLINK = Symbol('hardlink')\nconst HEADER = Symbol('header')\nconst READ = Symbol('read')\nconst LSTAT = Symbol('lstat')\nconst ONLSTAT = Symbol('onlstat')\nconst ONREAD = Symbol('onread')\nconst ONREADLINK = Symbol('onreadlink')\nconst OPENFILE = Symbol('openfile')\nconst ONOPENFILE = Symbol('onopenfile')\nconst CLOSE = Symbol('close')\nconst MODE = Symbol('mode')\nconst warner = require('./warn-mixin.js')\nconst winchars = require('./winchars.js')\nconst stripAbsolutePath = require('./strip-absolute-path.js')\n\nconst modeFix = require('./mode-fix.js')\n\nconst WriteEntry = warner(class WriteEntry extends MiniPass {\n  constructor (p, opt) {\n    opt = opt || {}\n    super(opt)\n    if (typeof p !== 'string')\n      throw new TypeError('path is required')\n    this.path = p\n    // suppress atime, ctime, uid, gid, uname, gname\n    this.portable = !!opt.portable\n    // until node has builtin pwnam functions, this'll have to do\n    this.myuid = process.getuid && process.getuid()\n    this.myuser = process.env.USER || ''\n    this.maxReadSize = opt.maxReadSize || maxReadSize\n    this.linkCache = opt.linkCache || new Map()\n    this.statCache = opt.statCache || new Map()\n    this.preservePaths = !!opt.preservePaths\n    this.cwd = opt.cwd || process.cwd()\n    this.strict = !!opt.strict\n    this.noPax = !!opt.noPax\n    this.noMtime = !!opt.noMtime\n    this.mtime = opt.mtime || null\n\n    if (typeof opt.onwarn === 'function')\n      this.on('warn', opt.onwarn)\n\n    let pathWarn = false\n    if (!this.preservePaths) {\n      const [root, stripped] = stripAbsolutePath(this.path)\n      if (root) {\n        this.path = stripped\n        pathWarn = root\n      }\n    }\n\n    this.win32 = !!opt.win32 || process.platform === 'win32'\n    if (this.win32) {\n      this.path = winchars.decode(this.path.replace(/\\\\/g, '/'))\n      p = p.replace(/\\\\/g, '/')\n    }\n\n    this.absolute = opt.absolute || path.resolve(this.cwd, p)\n\n    if (this.path === '')\n      this.path = './'\n\n    if (pathWarn) {\n      this.warn('TAR_ENTRY_INFO', `stripping ${pathWarn} from absolute path`, {\n        entry: this,\n        path: pathWarn + this.path,\n      })\n    }\n\n    if (this.statCache.has(this.absolute))\n      this[ONLSTAT](this.statCache.get(this.absolute))\n    else\n      this[LSTAT]()\n  }\n\n  [LSTAT] () {\n    fs.lstat(this.absolute, (er, stat) => {\n      if (er)\n        return this.emit('error', er)\n      this[ONLSTAT](stat)\n    })\n  }\n\n  [ONLSTAT] (stat) {\n    this.statCache.set(this.absolute, stat)\n    this.stat = stat\n    if (!stat.isFile())\n      stat.size = 0\n    this.type = getType(stat)\n    this.emit('stat', stat)\n    this[PROCESS]()\n  }\n\n  [PROCESS] () {\n    switch (this.type) {\n      case 'File': return this[FILE]()\n      case 'Directory': return this[DIRECTORY]()\n      case 'SymbolicLink': return this[SYMLINK]()\n      // unsupported types are ignored.\n      default: return this.end()\n    }\n  }\n\n  [MODE] (mode) {\n    return modeFix(mode, this.type === 'Directory', this.portable)\n  }\n\n  [HEADER] () {\n    if (this.type === 'Directory' && this.portable)\n      this.noMtime = true\n\n    this.header = new Header({\n      path: this.path,\n      linkpath: this.linkpath,\n      // only the permissions and setuid/setgid/sticky bitflags\n      // not the higher-order bits that specify file type\n      mode: this[MODE](this.stat.mode),\n      uid: this.portable ? null : this.stat.uid,\n      gid: this.portable ? null : this.stat.gid,\n      size: this.stat.size,\n      mtime: this.noMtime ? null : this.mtime || this.stat.mtime,\n      type: this.type,\n      uname: this.portable ? null :\n      this.stat.uid === this.myuid ? this.myuser : '',\n      atime: this.portable ? null : this.stat.atime,\n      ctime: this.portable ? null : this.stat.ctime,\n    })\n\n    if (this.header.encode() && !this.noPax) {\n      this.write(new Pax({\n        atime: this.portable ? null : this.header.atime,\n        ctime: this.portable ? null : this.header.ctime,\n        gid: this.portable ? null : this.header.gid,\n        mtime: this.noMtime ? null : this.mtime || this.header.mtime,\n        path: this.path,\n        linkpath: this.linkpath,\n        size: this.header.size,\n        uid: this.portable ? null : this.header.uid,\n        uname: this.portable ? null : this.header.uname,\n        dev: this.portable ? null : this.stat.dev,\n        ino: this.portable ? null : this.stat.ino,\n        nlink: this.portable ? null : this.stat.nlink,\n      }).encode())\n    }\n    this.write(this.header.block)\n  }\n\n  [DIRECTORY] () {\n    if (this.path.substr(-1) !== '/')\n      this.path += '/'\n    this.stat.size = 0\n    this[HEADER]()\n    this.end()\n  }\n\n  [SYMLINK] () {\n    fs.readlink(this.absolute, (er, linkpath) => {\n      if (er)\n        return this.emit('error', er)\n      this[ONREADLINK](linkpath)\n    })\n  }\n\n  [ONREADLINK] (linkpath) {\n    this.linkpath = linkpath.replace(/\\\\/g, '/')\n    this[HEADER]()\n    this.end()\n  }\n\n  [HARDLINK] (linkpath) {\n    this.type = 'Link'\n    this.linkpath = path.relative(this.cwd, linkpath).replace(/\\\\/g, '/')\n    this.stat.size = 0\n    this[HEADER]()\n    this.end()\n  }\n\n  [FILE] () {\n    if (this.stat.nlink > 1) {\n      const linkKey = this.stat.dev + ':' + this.stat.ino\n      if (this.linkCache.has(linkKey)) {\n        const linkpath = this.linkCache.get(linkKey)\n        if (linkpath.indexOf(this.cwd) === 0)\n          return this[HARDLINK](linkpath)\n      }\n      this.linkCache.set(linkKey, this.absolute)\n    }\n\n    this[HEADER]()\n    if (this.stat.size === 0)\n      return this.end()\n\n    this[OPENFILE]()\n  }\n\n  [OPENFILE] () {\n    fs.open(this.absolute, 'r', (er, fd) => {\n      if (er)\n        return this.emit('error', er)\n      this[ONOPENFILE](fd)\n    })\n  }\n\n  [ONOPENFILE] (fd) {\n    const blockLen = 512 * Math.ceil(this.stat.size / 512)\n    const bufLen = Math.min(blockLen, this.maxReadSize)\n    const buf = Buffer.allocUnsafe(bufLen)\n    this[READ](fd, buf, 0, buf.length, 0, this.stat.size, blockLen)\n  }\n\n  [READ] (fd, buf, offset, length, pos, remain, blockRemain) {\n    fs.read(fd, buf, offset, length, pos, (er, bytesRead) => {\n      if (er) {\n        // ignoring the error from close(2) is a bad practice, but at\n        // this point we already have an error, don't need another one\n        return this[CLOSE](fd, () => this.emit('error', er))\n      }\n      this[ONREAD](fd, buf, offset, length, pos, remain, blockRemain, bytesRead)\n    })\n  }\n\n  [CLOSE] (fd, cb) {\n    fs.close(fd, cb)\n  }\n\n  [ONREAD] (fd, buf, offset, length, pos, remain, blockRemain, bytesRead) {\n    if (bytesRead <= 0 && remain > 0) {\n      const er = new Error('encountered unexpected EOF')\n      er.path = this.absolute\n      er.syscall = 'read'\n      er.code = 'EOF'\n      return this[CLOSE](fd, () => this.emit('error', er))\n    }\n\n    if (bytesRead > remain) {\n      const er = new Error('did not encounter expected EOF')\n      er.path = this.absolute\n      er.syscall = 'read'\n      er.code = 'EOF'\n      return this[CLOSE](fd, () => this.emit('error', er))\n    }\n\n    // null out the rest of the buffer, if we could fit the block padding\n    if (bytesRead === remain) {\n      for (let i = bytesRead; i < length && bytesRead < blockRemain; i++) {\n        buf[i + offset] = 0\n        bytesRead++\n        remain++\n      }\n    }\n\n    const writeBuf = offset === 0 && bytesRead === buf.length ?\n      buf : buf.slice(offset, offset + bytesRead)\n    remain -= bytesRead\n    blockRemain -= bytesRead\n    pos += bytesRead\n    offset += bytesRead\n\n    this.write(writeBuf)\n\n    if (!remain) {\n      if (blockRemain)\n        this.write(Buffer.alloc(blockRemain))\n      return this[CLOSE](fd, er => er ? this.emit('error', er) : this.end())\n    }\n\n    if (offset >= length) {\n      buf = Buffer.allocUnsafe(length)\n      offset = 0\n    }\n    length = buf.length - offset\n    this[READ](fd, buf, offset, length, pos, remain, blockRemain)\n  }\n})\n\nclass WriteEntrySync extends WriteEntry {\n  [LSTAT] () {\n    this[ONLSTAT](fs.lstatSync(this.absolute))\n  }\n\n  [SYMLINK] () {\n    this[ONREADLINK](fs.readlinkSync(this.absolute))\n  }\n\n  [OPENFILE] () {\n    this[ONOPENFILE](fs.openSync(this.absolute, 'r'))\n  }\n\n  [READ] (fd, buf, offset, length, pos, remain, blockRemain) {\n    let threw = true\n    try {\n      const bytesRead = fs.readSync(fd, buf, offset, length, pos)\n      this[ONREAD](fd, buf, offset, length, pos, remain, blockRemain, bytesRead)\n      threw = false\n    } finally {\n      // ignoring the error from close(2) is a bad practice, but at\n      // this point we already have an error, don't need another one\n      if (threw) {\n        try {\n          this[CLOSE](fd, () => {})\n        } catch (er) {}\n      }\n    }\n  }\n\n  [CLOSE] (fd, cb) {\n    fs.closeSync(fd)\n    cb()\n  }\n}\n\nconst WriteEntryTar = warner(class WriteEntryTar extends MiniPass {\n  constructor (readEntry, opt) {\n    opt = opt || {}\n    super(opt)\n    this.preservePaths = !!opt.preservePaths\n    this.portable = !!opt.portable\n    this.strict = !!opt.strict\n    this.noPax = !!opt.noPax\n    this.noMtime = !!opt.noMtime\n\n    this.readEntry = readEntry\n    this.type = readEntry.type\n    if (this.type === 'Directory' && this.portable)\n      this.noMtime = true\n\n    this.path = readEntry.path\n    this.mode = this[MODE](readEntry.mode)\n    this.uid = this.portable ? null : readEntry.uid\n    this.gid = this.portable ? null : readEntry.gid\n    this.uname = this.portable ? null : readEntry.uname\n    this.gname = this.portable ? null : readEntry.gname\n    this.size = readEntry.size\n    this.mtime = this.noMtime ? null : opt.mtime || readEntry.mtime\n    this.atime = this.portable ? null : readEntry.atime\n    this.ctime = this.portable ? null : readEntry.ctime\n    this.linkpath = readEntry.linkpath\n\n    if (typeof opt.onwarn === 'function')\n      this.on('warn', opt.onwarn)\n\n    let pathWarn = false\n    if (!this.preservePaths) {\n      const [root, stripped] = stripAbsolutePath(this.path)\n      if (root) {\n        this.path = stripped\n        pathWarn = root\n      }\n    }\n\n    this.remain = readEntry.size\n    this.blockRemain = readEntry.startBlockSize\n\n    this.header = new Header({\n      path: this.path,\n      linkpath: this.linkpath,\n      // only the permissions and setuid/setgid/sticky bitflags\n      // not the higher-order bits that specify file type\n      mode: this.mode,\n      uid: this.portable ? null : this.uid,\n      gid: this.portable ? null : this.gid,\n      size: this.size,\n      mtime: this.noMtime ? null : this.mtime,\n      type: this.type,\n      uname: this.portable ? null : this.uname,\n      atime: this.portable ? null : this.atime,\n      ctime: this.portable ? null : this.ctime,\n    })\n\n    if (pathWarn) {\n      this.warn('TAR_ENTRY_INFO', `stripping ${pathWarn} from absolute path`, {\n        entry: this,\n        path: pathWarn + this.path,\n      })\n    }\n\n    if (this.header.encode() && !this.noPax) {\n      super.write(new Pax({\n        atime: this.portable ? null : this.atime,\n        ctime: this.portable ? null : this.ctime,\n        gid: this.portable ? null : this.gid,\n        mtime: this.noMtime ? null : this.mtime,\n        path: this.path,\n        linkpath: this.linkpath,\n        size: this.size,\n        uid: this.portable ? null : this.uid,\n        uname: this.portable ? null : this.uname,\n        dev: this.portable ? null : this.readEntry.dev,\n        ino: this.portable ? null : this.readEntry.ino,\n        nlink: this.portable ? null : this.readEntry.nlink,\n      }).encode())\n    }\n\n    super.write(this.header.block)\n    readEntry.pipe(this)\n  }\n\n  [MODE] (mode) {\n    return modeFix(mode, this.type === 'Directory', this.portable)\n  }\n\n  write (data) {\n    const writeLen = data.length\n    if (writeLen > this.blockRemain)\n      throw new Error('writing more to entry than is appropriate')\n    this.blockRemain -= writeLen\n    return super.write(data)\n  }\n\n  end () {\n    if (this.blockRemain)\n      this.write(Buffer.alloc(this.blockRemain))\n    return super.end()\n  }\n})\n\nWriteEntry.Sync = WriteEntrySync\nWriteEntry.Tar = WriteEntryTar\n\nconst getType = stat =>\n  stat.isFile() ? 'File'\n  : stat.isDirectory() ? 'Directory'\n  : stat.isSymbolicLink() ? 'SymbolicLink'\n  : 'Unsupported'\n\nmodule.exports = WriteEntry\n"]},"metadata":{},"sourceType":"script"}